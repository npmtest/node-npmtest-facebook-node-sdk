{"/home/travis/build/npmtest/node-npmtest-facebook-node-sdk/test.js":"/* istanbul instrument in package npmtest_facebook_node_sdk */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-facebook-node-sdk/lib.npmtest_facebook_node_sdk.js":"/* istanbul instrument in package npmtest_facebook_node_sdk */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_facebook_node_sdk = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_facebook_node_sdk = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-facebook-node-sdk/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-facebook-node-sdk && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_facebook_node_sdk */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_facebook_node_sdk\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_facebook_node_sdk.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_facebook_node_sdk.rollup.js'] =\n            local.assetsDict['/assets.npmtest_facebook_node_sdk.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_facebook_node_sdk.__dirname + '/lib.npmtest_facebook_node_sdk.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-facebook-node-sdk/node_modules/facebook-node-sdk/lib/facebook.js":"var util = require('util');\n\nvar BaseFacebook = require(__dirname + '/basefacebook.js');\n\nfunction Facebook(config) {\n  this.hasSession = !!(config.request && config.request.session);\n  BaseFacebook.apply(this, arguments);\n}\n\nutil.inherits(Facebook, BaseFacebook);\n\nFacebook.prototype.setPersistentData = function(key, value) {\n  if (this.hasSession) {\n    this.request.session[key] = value;\n  }\n};\n\nFacebook.prototype.getPersistentData = function(key, defaultValue) {\n  if (this.hasSession) {\n    return this.request.session[key] || defaultValue;\n  }\n  return defaultValue;\n};\n\nFacebook.prototype.clearPersistentData = function(key) {\n  if (this.hasSession) {\n    delete this.request.session[key];\n  }\n};\n\nFacebook.prototype.clearAllPersistentData = function() {\n  if (this.hasSession) {\n    for (var name in this.sessionNameMap) {\n      if (this.sessionNameMap.hasOwnProperty(name)) {\n        this.clearPersistentData(this.sessionNameMap[name]);\n      }\n    }\n  }\n};\n\nFacebook.middleware = function(config) {\n  return function(req, res, next) {\n    config.request = req;\n    config.response = res;\n    req.facebook = new Facebook(config);\n    next();\n  }\n};\n\nFacebook.loginRequired = function(config) {\n  return function(req, res, next) {\n    if (!req.facebook) {\n      Facebook.middleware(config)(req, res, afterNew);\n    }\n    else {\n      afterNew();\n    }\n    function afterNew() {\n      req.facebook.getUser(function(err, user) {\n        if (err) {\n          next(err);\n          next = null;\n        }\n        else {\n          if (user === 0) { \n            try {\n              var loginUrl = req.facebook.getLoginUrl(config)\n            }\n            catch (err) {\n              next(err);\n              next = null;\n              return;\n            }\n            res.redirect(loginUrl);\n            next = null;\n          }\n          else {\n            next();\n            next = null;\n          }\n        }\n      });\n    }\n  };\n};\n\nmodule.exports = Facebook;\n\n","/home/travis/build/npmtest/node-npmtest-facebook-node-sdk/node_modules/facebook-node-sdk/lib/basefacebook.js":"var assert = require('assert');\nvar https = require('https');\nvar crypto = require('crypto');\nvar util = require('util');\nvar url = require('url');\nvar querystring = require('querystring');\nvar cb = require('./cbutil');\nvar requestUtil = require('./requestutil');\n\n/**\n * Initialize a Facebook Application.\n *\n * The configuration:\n * - appId: the application ID\n * - secret: the application secret\n * - fileUpload: (optional) boolean indicating if file uploads are enabled\n *\n * @param array $config The application configuration\n */\nfunction BaseFacebook(config) {\n  if (config.hasOwnProperty('request')) {\n    this.request = config.request;\n  }\n  if (config.hasOwnProperty('response')) {\n    this.response = config.response;\n  }\n  if (config.hasOwnProperty('currentUrl')) {\n    this.currentUrl = config.currentUrl;\n  }\n  this.setAppId(config.appId);\n  this.setAppSecret(config.secret);\n  if (config.hasOwnProperty('fileUpload')) {\n    this.setFileUploadSupport(config.fileUpload);\n  }\n\n  var state = this.getPersistentData('state');\n  if (state) {\n    this.state = state;\n  }\n}\n\nBaseFacebook.prototype.request = null;\nBaseFacebook.prototype.response = null;\n\nBaseFacebook.prototype.currentUrl = null;\n\nBaseFacebook.prototype.sessionNameMap = {\n  access_token: 'access_token',\n  user_id: 'user_id',\n  code: 'code',\n  state: 'state'\n};\n\nBaseFacebook.prototype.getRequestParam = function(key) {\n  if (!this.request) {\n    return null;\n  }\n  if (this.request.query && this.request.query.hasOwnProperty(key)) {\n    return this.request.query[key];\n  }\n  else if (this.request.body && this.request.body.hasOwnProperty(key)) {\n    return this.request.body[key];\n  }\n  else {\n    return null;\n  }\n};\n\nBaseFacebook.prototype.getCookie = function(key) {\n  if (this.hasCookie(key)) {\n    return this.request.cookies[key];\n  }\n  else {\n    return null;\n  }\n};\n\nBaseFacebook.prototype.hasCookie = function(key) {\n  return this.request && this.request.cookies && this.request.cookies.hasOwnProperty(key);\n};\n\nBaseFacebook.prototype.sentHeaders = function() {\n  return this.response && this.response._header;\n};\n\nBaseFacebook.prototype.clearCookie = function(key, options) {\n  if (this.response) {\n    this.response.clearCookie.apply(this.response, arguments);\n  }\n};\n\n/*\nWe don't need yet.\nBaseFacebook.prototype.setCookie = function(key, value, options) {\n  if (this.response) {\n    this.response.cookie.apply(this.response, arguments);\n  }\n};\n*/\n\nBaseFacebook.prototype.appId = null;\n\n/**\n * Set the Application ID.\n *\n * @param string appId The Application ID\n * @return BaseFacebook\n */\nBaseFacebook.prototype.setAppId = function(appId) {\n  this.appId = appId;\n  return this;\n};\n\n/**\n * Get the Application ID.\n *\n * @return string the Application ID\n */\nBaseFacebook.prototype.getAppId = function() {\n  return this.appId;\n};\n\nBaseFacebook.prototype.appSecret = null;\n\n/**\n * Set the App Secret.\n *\n * @param string appSecret The App Secret\n * @return BaseFacebook\n * @deprecated\n */\nBaseFacebook.prototype.setApiSecret = function(appSecret) {\n  this.appSecret = appSecret;\n  return this;\n};\n\n/**\n * Set the App Secret.\n *\n * @param string appSecret The App Secret\n * @return BaseFacebook\n */\nBaseFacebook.prototype.setAppSecret = function(appSecret) {\n  this.appSecret = appSecret;\n  return this;\n};\n\n/**\n * Get the App Secret.\n *\n * @return string the App Secret\n * @deprecated\n */\nBaseFacebook.prototype.getApiSecret = function() {\n  return this.appSecret;\n};\n\n/**\n * Get the App Secret.\n *\n * @return string the App Secret\n */\nBaseFacebook.prototype.getAppSecret = function() {\n  return this.appSecret;\n};\n\nBaseFacebook.prototype.fileUploadSupport = false;\n\n/**\n * Set the file upload support status.\n *\n * @param boolean $fileUploadSupport The file upload support status.\n * @return BaseFacebook\n */\nBaseFacebook.prototype.setFileUploadSupport = function(fileUploadSupport) {\n  this.fileUploadSupport = fileUploadSupport;\n  return this;\n};\n\n/**\n * Get the file upload support status.\n *\n * @return boolean true if and only if the server supports file upload.\n */\nBaseFacebook.prototype.getFileUploadSupport = function() {\n  return this.fileUploadSupport;\n};\n\n\n/**\n * DEPRECATED! Please use getFileUploadSupport instead.\n *\n * Get the file upload support status.\n *\n * @return boolean true if and only if the server supports file upload.\n */\nBaseFacebook.prototype.useFileUploadSupport = function() {\n  return this.getFileUploadSupport();\n}\n\n\nBaseFacebook.prototype.accessToken = null;\n\n/**\n * Sets the access token for api calls.  Use this if you get\n * your access token by other means and just want the SDK\n * to use it.\n *\n * @param string $access_token an access token.\n * @return BaseFacebook\n */\nBaseFacebook.prototype.setAccessToken = function(accessToken) {\n  this.accessToken = accessToken;\n  return this;\n};\n\n/**\n * Determines the access token that should be used for API calls.\n * The first time this is called, $this->accessToken is set equal\n * to either a valid user access token, or it's set to the application\n * access token if a valid user access token wasn't available.  Subsequent\n * calls return whatever the first call returned.\n *\n * @return string The access token\n */\nBaseFacebook.prototype.getAccessToken = function getAccessToken(callback) {\n  if (this.accessToken !== null) {\n    // we've done this already and cached it.  Just return.\n    callback(null, this.accessToken);\n  }\n  else {\n    // first establish access token to be the application\n    // access token, in case we navigate to the /oauth/access_token\n    // endpoint, where SOME access token is required.\n    this.setAccessToken(this.getApplicationAccessToken());\n    var self = this;\n    this.getUserAccessToken(cb.returnToCallback(callback, false, function(userAccessToken) {\n      if (userAccessToken) {\n        self.setAccessToken(userAccessToken);\n      }\n      return self.accessToken;\n    }));\n  }\n};\n\nBaseFacebook.prototype.getAccessToken = cb.wrap(BaseFacebook.prototype.getAccessToken);\n\n/**\n * Determines and returns the user access token, first using\n * the signed request if present, and then falling back on\n * the authorization code if present.  The intent is to\n * return a valid user access token, or false if one is determined\n * to not be available.\n *\n * @return string A valid user access token, or false if one\n *                could not be determined.\n */\nBaseFacebook.prototype.getUserAccessToken = function getUserAccessToken(callback) {\n  // first, consider a signed request if it's supplied.\n  // if there is a signed request, then it alone determines\n  // the access token.\n  var signedRequest = this.getSignedRequest();\n  if (signedRequest) {\n    // apps.facebook.com hands the access_token in the signed_request\n    if (signedRequest.hasOwnProperty('oauth_token')) {\n      var accessToken = signedRequest.oauth_token;\n      this.setPersistentData('access_token', accessToken);\n      callback(null, accessToken);\n    }\n    else {\n      // the JS SDK puts a code in with the redirect_uri of ''\n      if (signedRequest.hasOwnProperty('code')) {\n        var code = signedRequest.code;\n        var self = this;\n        this.getAccessTokenFromCode(code, null, cb.returnToCallback(callback, false, handleAccessTokenFromCode));\n      }\n      else {\n        // signed request states there's no access token, so anything\n        // stored should be cleared.\n        this.clearAllPersistentData();\n        // respect the signed request's data, even\n        // if there's an authorization code or something else\n        callback(null, false);\n      }\n    }\n  }\n  else {\n    var code = this.getCode();\n    if (code && code !== this.getPersistentData('code')) {\n      var self = this;\n      this.getAccessTokenFromCode(code, null, cb.returnToCallback(callback, false, handleAccessTokenFromCode));\n    }\n    else {\n      // as a fallback, just return whatever is in the persistent\n      // store, knowing nothing explicit (signed request, authorization\n      // code, etc.) was present to shadow it (or we saw a code in $_REQUEST,\n      // but it's the same as what's in the persistent store)\n      callback(null, this.getPersistentData('access_token'));\n    }\n  }\n  function handleAccessTokenFromCode(accessToken) {\n    if (accessToken) {\n      self.setPersistentData('code', code);\n      self.setPersistentData('access_token', accessToken);\n      return accessToken;\n    }\n    else {\n      // signed request states there's no access token, so anything\n      // stored should be cleared.\n      self.clearAllPersistentData();\n      // respect the signed request's data, even\n      // if there's an authorization code or something else\n      return false;\n    }\n  }\n};\n\nBaseFacebook.prototype.getUserAccessToken = cb.wrap(BaseFacebook.prototype.getUserAccessToken);\n\nBaseFacebook.prototype.mergeObject = function() {\n  var obj = {};\n  for (var i = 0; i < arguments.length; i++) {\n    var arg = arguments[i];\n    for (var name in arg) {\n      if (arg.hasOwnProperty(name)) {\n        obj[name] = arg[name];\n      }\n    }\n  }\n  return obj;\n};\n\n/**\n * Get a Login URL for use with redirects. By default, full page redirect is\n * assumed. If you are using the generated URL with a window.open() call in\n * JavaScript, you can pass in display=popup as part of the $params.\n *\n * The parameters:\n * - redirect_uri: the url to go to after a successful login\n * - scope: comma separated list of requested extended perms\n *\n * @param array $params Provide custom parameters\n * @return string The URL for the login flow\n *\n * @throws Error\n */\nBaseFacebook.prototype.getLoginUrl = function(params) {\n  if (!params) {\n    params = {};\n  }\n  this.establishCSRFTokenState();\n  var currentUrl = this.getCurrentUrl();\n\n  // if 'scope' is passed as an array, convert to comma separated list\n  var scopeParams = params.hasOwnProperty('scope') ? params.scope : null;\n  if (scopeParams && isArray(scopeParams)) {\n    params.scope = scopeParams.join(',');\n  }\n\n  return 'https://www.facebook.com/dialog/oauth?' + querystring.stringify(this.mergeObject({\n    client_id: this.getAppId(),\n    redirect_uri: currentUrl, // possibly overwritten\n    state: this.state\n  }, params));\n};\n\n/**\n * Get a Logout URL suitable for use with redirects.\n *\n * The parameters:\n * - next: the url to go to after a successful logout\n *\n * @param array $params Provide custom parameters\n * @return string The URL for the logout flow\n */\nBaseFacebook.prototype.getLogoutUrl = function getLogoutUrl(/* params, callback */) {\n  var args = [].slice.call(arguments);\n  var callback = args.pop();\n  var params = args.shift();\n  if (!params) {\n    params = {};\n  }\n\n  var self = this;\n  this.getAccessToken(cb.returnToCallback(callback, false, function(accessToken) {\n    var currentUrl = self.getCurrentUrl();\n    var queryMap = self.mergeObject({ next: currentUrl, access_token: accessToken }, params);\n    var query = querystring.stringify(queryMap)\n    return 'https://www.facebook.com/logout.php?' + query;\n  }));\n};\n\nBaseFacebook.prototype.getLogoutUrl = cb.wrap(BaseFacebook.prototype.getLogoutUrl);\n\n/**\n * Get a login status URL to fetch the status from Facebook.\n *\n * The parameters:\n * - ok_session: the URL to go to if a session is found\n * - no_session: the URL to go to if the user is not connected\n * - no_user: the URL to go to if the user is not signed into facebook\n *\n * @param array $params Provide custom parameters\n * @return string The URL for the logout flow\n *\n * @throws Error\n */\nBaseFacebook.prototype.getLoginStatusUrl = function(params) {\n  var currentUrl = this.getCurrentUrl();\n  return 'https://www.facebook.com/extern/login_status.php?' + querystring.stringify(this.mergeObject({\n    api_key: this.getAppId(),\n    no_session: currentUrl,\n    no_user: currentUrl,\n    ok_session: currentUrl,\n    session_version: 3\n  }, params));\n};\n\nBaseFacebook.prototype.state = null;\n\n/**\n * Lays down a CSRF state token for this process.\n *\n * @return void\n */\nBaseFacebook.prototype.establishCSRFTokenState = function() {\n  if (this.state === null) {\n    var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var buf = [];\n    for (var i = 0; i < 32; i++) {\n      buf.push(chars[Math.floor(chars.length * Math.random())]);\n    }\n    this.state = buf.join('');\n    this.setPersistentData('state', this.state);\n  }\n};\n\n/**\n * Returns the access token that should be used for logged out\n * users when no authorization code is available.\n *\n * @return string The application access token, useful for gathering\n *                public information about users and applications.\n */\nBaseFacebook.prototype.getApplicationAccessToken = function() {\n  return this.appId + '|' + this.appSecret;\n}\n\nBaseFacebook.prototype.signedRequest = null;\n\n/**\n * Retrieve the signed request, either from a request parameter or,\n * if not present, from a cookie.\n *\n * @return string the signed request, if available, or null otherwise.\n */\nBaseFacebook.prototype.getSignedRequest = function() {\n  if (this.signedRequest === null) {\n    var param = this.getRequestParam('signed_request');\n    if (param !== null) {\n      parseSignedRequestWrapped(this, param);\n    }\n    if (this.signedRequest === null) {\n      var cookieName = this.getSignedRequestCookieName();\n      var cookieValue = this.getCookie(cookieName);\n      if (cookieValue !== null) {\n        parseSignedRequestWrapped(this, cookieValue);\n      }\n    }\n  }\n\n  function parseSignedRequestWrapped(self, str) {\n    try {\n      self.signedRequest = self.parseSignedRequest(str);\n    }\n    catch (err) {\n      self.signedRequest = null;\n      self.errorLog('Parse error sigened_request cookie: ' + str);\n    }\n  }\n\n  return this.signedRequest;\n};\n\nBaseFacebook.prototype.user = null;\n\n/**\n * Get the UID of the connected user, or 0\n * if the Facebook user is not connected.\n *\n * @return string the UID if available.\n */\nBaseFacebook.prototype.getUser = function getUser(callback) {\n  if (this.user !== null) {\n    // we've already determined this and cached the value.\n    callback(null, this.user);\n  }\n  else {\n    var self = this;\n    this.getUserFromAvailableData(cb.returnToCallback(callback, false, function(user) {\n      self.user = user;\n      return self.user;\n    }));\n  }\n};\n\nBaseFacebook.prototype.getUser = cb.wrap(BaseFacebook.prototype.getUser);\n\n/**\n * Determines the connected user by first examining any signed\n * requests, then considering an authorization code, and then\n * falling back to any persistent store storing the user.\n *\n * @return integer The id of the connected Facebook user,\n *                 or 0 if no such user exists.\n */\nBaseFacebook.prototype.getUserFromAvailableData = function getUserFromAvailableData(callback) {\n  // if a signed request is supplied, then it solely determines\n  // who the user is.\n  var signedRequest = this.getSignedRequest();\n  if (signedRequest) {\n    if (signedRequest.hasOwnProperty('user_id')) {\n      var user = signedRequest.user_id;\n      assert.ok(typeof user === 'string' && user.match(/^\\d+$/));\n      this.setPersistentData('user_id', user);\n      callback(null, user);\n    }\n    else {\n      // if the signed request didn't present a user id, then invalidate\n      // all entries in any persistent store.\n      this.clearAllPersistentData();\n      callback(null, 0);\n    }\n  }\n  else {\n    var user = this.getPersistentData('user_id', 0);\n    var persistedAccessToken = this.getPersistentData('access_token');\n    // use access_token to fetch user id if we have a user access_token, or if\n    // the cached access token has changed.\n    var self = this;\n    this.getAccessToken(function(err, accessToken) {\n      try {\n        if (err) {\n          throw err;\n        }\n        if ((accessToken) &&\n          // access_token is not application access_token\n            (accessToken !== self.getApplicationAccessToken()) &&\n            // undefined user or access_token is old\n            (!user || persistedAccessToken !== accessToken)) {\n\n          self.getUserFromAccessToken(cb.returnToCallback(callback, false, function(user) {\n            if (user) {\n              assert.ok(typeof user === 'string' && user.match(/^\\d+$/));\n              self.setPersistentData('user_id', user);\n            }\n            else {\n              self.clearAllPersistentData();\n            }\n            return user;\n          }));\n        }\n        else {\n          callback(null, user);\n        }\n      }\n      catch (err) {\n        callback(err, null);\n      }\n    });\n  }\n};\n\nBaseFacebook.prototype.getUserFromAvailableData = cb.wrap(BaseFacebook.prototype.getUserFromAvailableData);\n\n/**\n * Make an API call.\n *\n * @return mixed The decoded response\n */\nBaseFacebook.prototype.api = function api(/* polymorphic */) {\n  var args = [].slice.call(arguments);\n  if (args[0] && typeof args[0] === 'object') {\n    var callback = args.pop();\n    this.restserver(args[0], callback);\n  } else {\n    this.graph.apply(this, args);\n  }\n};\n\nBaseFacebook.prototype.api = cb.wrap(BaseFacebook.prototype.api);\n\n/**\n * Invoke the old restserver.php endpoint.\n *\n * @param array $params Method call object\n *\n * @return mixed The decoded response object\n */\nBaseFacebook.prototype.restserver = function restserver(params, callback) {\n  // generic application level parameters\n  params.api_key = this.getAppId();\n  params.format = 'json-strings';\n\n  var self = this;\n  var host = this.getApiHost(params['method'])\n  this.oauthRequest(host, '/restserver.php', params, cb.returnToCallback(callback, false, function(response) {\n    try {\n      var result = JSON.parse(response);\n    }\n    catch (err) {\n      throw new Error('Parse REST server response error: ' + err.message);\n    }\n    // results are returned, errors are thrown\n    if (result && typeof result === 'object' && result.hasOwnProperty('error_code')) {\n      throw self.createApiError(result);\n    }\n    else {\n      if (params.method === 'auth.expireSession' || params.method === 'auth.revokeAuthorization') {\n        self.destroySession();\n      }\n      return result;\n    }\n  }));\n};\n\nBaseFacebook.prototype.restserver = cb.wrap(BaseFacebook.prototype.restserver);\n\n/**\n * Return true if this is video post.\n *\n * @param string $path The path\n * @param string $method The http method (default 'GET')\n *\n * @return boolean true if this is video post\n */\nBaseFacebook.prototype.isVideoPost = function isVideoPost(path, method) {\n  method = method || 'GET';\n  if (method == 'POST' && path.match(/^(\\/)(.+)(\\/)(videos)$/)) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * Invoke the Graph API.\n *\n * @param string $path The path (required)\n * @param string $method The http method (default 'GET')\n * @param array $params The query/post data\n *\n * @return mixed The decoded response object\n */\nBaseFacebook.prototype.graph = function graph(/* path, method, params, callback */) {\n  var args = [].slice.call(arguments);\n  var callback = args.pop();\n  var path = args.shift();\n  var method = 'GET';\n  var params = {};\n  if (args.length === 1) {\n    if (typeof args[0] === 'string') {\n      method = args[0];\n    }\n    else {\n      params = args[0];\n    }\n  }\n  else if (args.length === 2){\n    method = args[0];\n    params = args[1];\n  }\n\n  params.method = method; // method override as we always do a POST\n\n  var domain = this.isVideoPost(path, method) ? 'graph-video.facebook.com' : 'graph.facebook.com';\n\n  var self = this;\n  this.oauthRequest(domain, path, params, cb.returnToCallback(callback, false, function(response) {\n    try {\n      result = JSON.parse(response);\n    }\n    catch (err) {\n      throw new Error('Parse Graph API server response error: ' + err.message);\n    }\n    if (result && typeof result === 'object' && result.hasOwnProperty('error')) {\n      throw self.createApiError(result);\n    }\n    else {\n      return result;\n    }\n  }));\n};\n\nBaseFacebook.prototype.graph = cb.wrap(BaseFacebook.prototype.graph);\n\n/**\n * Analyzes the supplied result to see if it was thrown\n * because the access token is no longer valid.  If that is\n * the case, then we destroy the session.\n *\n * @param $result array A record storing the error message returned\n *                      by a failed API call.\n */\nBaseFacebook.prototype.createApiError = function(result) {\n  var err = new FacebookApiError(result);\n  switch (err.getType()) {\n    // OAuth 2.0 Draft 00 style\n    case 'OAuthException':\n      // OAuth 2.0 Draft 10 style\n    case 'invalid_token':\n      // REST server errors are just Exceptions\n    case 'Exception':\n      var message = err.message;\n      if ((message.indexOf('Error validating access token') !== -1) ||\n          (message.indexOf('Invalid OAuth access token') !== -1) ||\n          (message.indexOf('An active access token must be used') !== -1)) {\n        this.destroySession();\n      }\n      break;\n  }\n  return err;\n};\n\n/**\n * Destroy the current session\n */\nBaseFacebook.prototype.destroySession = function() {\n  this.accessToken = null;\n  this.signedRequest = null;\n  this.user = null;\n  this.clearAllPersistentData();\n\n  if (this.request) {\n    // Javascript sets a cookie that will be used in getSignedRequest that we\n    // need to clear if we can\n    var cookieName = this.getSignedRequestCookieName();\n\n    if (this.hasCookie(cookieName)) {\n      if (this.request.cookies) {\n        delete this.request.cookies[cookieName];\n      }\n\n      if (this.response) {\n        if (!this.sentHeaders()) {\n          // The base domain is stored in the metadata cookie if not we fallback\n          // to the current hostname\n          var host = this.request.headers['x-forwarded-host'] || this.request.headers.host;\n          var baseDomain = '.' + host;\n\n          var metadata = this.getMetadataCookie();\n          if (metadata.hasOwnProperty('base_domain') && typeof metadata['base_domain'] === 'string' && metadata['base_domain'] !== '') {\n            baseDomain = metadata['base_domain'];\n          }\n\n          this.clearCookie(cookieName, { path: '/', domain: baseDomain });\n        }\n        else {\n          this.errorLog(\n            'There exists a cookie that we wanted to clear that we couldn\\'t ' +\n            'clear because headers was already sent. Make sure to do the first ' +\n            'API call before outputing anything'\n          );\n        }\n      }\n    }\n  }\n};\n\n/**\n * Parses the metadata cookie that our Javascript API set\n *\n * @return  an array mapping key to value\n */\nBaseFacebook.prototype.getMetadataCookie = function getMetadataCookie() {\n  var cookieName = this.getMetadataCookieName();\n  if (!this.hasCookie(cookieName)) {\n    return {};\n  }\n\n  // The cookie value can be wrapped in \"-characters so remove them\n  var cookieValue = this.getCookie(cookieName);\n  cookieValue = cookieValue.replace(/\"/g, '');\n\n  if (cookieValue === '') {\n    return {};\n  }\n\n  var parts = cookieValue.split(/&/);\n  var metadata = {};\n  for (var i = 0; i < parts.length; i++) {\n    var part = parts[i];\n    var pair = part.split(/=/, 2);\n    if (pair[0] !== '') {\n      metadata[decodeURIComponent(pair[0])] = (pair.length > 1) ? decodeURIComponent(pair[1]) : '';\n    }\n  }\n\n  return metadata;\n};\n\nBaseFacebook.prototype.apiReadOnlyCalls = {\n  'admin.getallocation': true,\n  'admin.getappproperties': true,\n  'admin.getbannedusers': true,\n  'admin.getlivestreamvialink': true,\n  'admin.getmetrics': true,\n  'admin.getrestrictioninfo': true,\n  'application.getpublicinfo': true,\n  'auth.getapppublickey': true,\n  'auth.getsession': true,\n  'auth.getsignedpublicsessiondata': true,\n  'comments.get': true,\n  'connect.getunconnectedfriendscount': true,\n  'dashboard.getactivity': true,\n  'dashboard.getcount': true,\n  'dashboard.getglobalnews': true,\n  'dashboard.getnews': true,\n  'dashboard.multigetcount': true,\n  'dashboard.multigetnews': true,\n  'data.getcookies': true,\n  'events.get': true,\n  'events.getmembers': true,\n  'fbml.getcustomtags': true,\n  'feed.getappfriendstories': true,\n  'feed.getregisteredtemplatebundlebyid': true,\n  'feed.getregisteredtemplatebundles': true,\n  'fql.multiquery': true,\n  'fql.query': true,\n  'friends.arefriends': true,\n  'friends.get': true,\n  'friends.getappusers': true,\n  'friends.getlists': true,\n  'friends.getmutualfriends': true,\n  'gifts.get': true,\n  'groups.get': true,\n  'groups.getmembers': true,\n  'intl.gettranslations': true,\n  'links.get': true,\n  'notes.get': true,\n  'notifications.get': true,\n  'pages.getinfo': true,\n  'pages.isadmin': true,\n  'pages.isappadded': true,\n  'pages.isfan': true,\n  'permissions.checkavailableapiaccess': true,\n  'permissions.checkgrantedapiaccess': true,\n  'photos.get': true,\n  'photos.getalbums': true,\n  'photos.gettags': true,\n  'profile.getinfo': true,\n  'profile.getinfooptions': true,\n  'stream.get': true,\n  'stream.getcomments': true,\n  'stream.getfilters': true,\n  'users.getinfo': true,\n  'users.getloggedinuser': true,\n  'users.getstandardinfo': true,\n  'users.hasapppermission': true,\n  'users.isappuser': true,\n  'users.isverified': true,\n  'video.getuploadlimits': true\n};\n\n/**\n * Build the URL for api given parameters.\n *\n * @param $method String the method name.\n * @return string The URL for the given parameters\n */\nBaseFacebook.prototype.getApiHost = function(method) {\n  var host = 'api.facebook.com';\n  if (this.apiReadOnlyCalls.hasOwnProperty(method.toLowerCase())) {\n    host = 'api-read.facebook.com';\n  }\n  else if (method.toLowerCase() === 'video.upload') {\n    host = 'api-video.facebook.com';\n  }\n  return host;\n};\n\n/**\n * Constructs and returns the name of the cookie that\n * potentially houses the signed request for the app user.\n * The cookie is not set by the BaseFacebook class, but\n * it may be set by the JavaScript SDK.\n *\n * @return string the name of the cookie that would house\n *         the signed request value.\n */\nBaseFacebook.prototype.getSignedRequestCookieName = function() {\n  return 'fbsr_' + this.getAppId();\n};\n\n/**\n * Parses a signed_request and validates the signature.\n *\n * @param string $signed_request A signed token\n * @return array The payload inside it or null if the sig is wrong\n *\n * @throws Error\n */\nBaseFacebook.prototype.parseSignedRequest = function(signedRequest) {\n  var splittedSignedRequest = signedRequest.split(/\\./);\n  var encodedSig = splittedSignedRequest.shift();\n  var payload = splittedSignedRequest.join('.');\n\n  // decode the data\n  var sig = this.base64UrlDecode(encodedSig);\n\n  // must catch in caller\n  var data = JSON.parse(this.base64UrlDecode(payload).toString('utf8'));\n\n  if (data.algorithm.toUpperCase() !== 'HMAC-SHA256') {\n    this.errorLog('Unknown algorithm. Expected HMAC-SHA256');\n    return null;\n  }\n\n  // check sig\n  var hmac = crypto.createHmac('sha256', this.getAppSecret());\n  hmac.update(payload);\n  var expectedSig = hmac.digest('base64');\n  if (sig.toString('base64') !== expectedSig) {\n    this.errorLog('Bad Signed JSON signature!');\n    return null;\n  }\n\n  return data;\n};\n\nBaseFacebook.prototype.base64UrlDecode = function(input) {\n  var base64 = input.replace(/-/g, '+').replace(/_/g, '/');\n  return new Buffer(base64, 'base64');\n};\n\n/**\n * Constructs and returns the name of the coookie that potentially contain\n * metadata. The cookie is not set by the BaseFacebook class, but it may be\n * set by the JavaScript SDK.\n *\n * @return string the name of the cookie that would house metadata.\n */\nBaseFacebook.prototype.getMetadataCookieName = function getMetadataCookieName() {\n  return 'fbm_' + this.getAppId();\n};\n\n/**\n * Get the authorization code from the query parameters, if it exists,\n * and otherwise return false to signal no authorization code was\n * discoverable.\n *\n * @return mixed The authorization code, or false if the authorization\n *               code could not be determined.\n */\nBaseFacebook.prototype.getCode = function() {\n  var code = this.getRequestParam('code');\n  if (code !== null) {\n    var state = this.getRequestParam('state');\n    if (this.state !== null && state !== null && this.state === state) {\n\n      // CSRF state has done its job, so clear it\n      this.state = null;\n      this.clearPersistentData('state');\n      return code;\n    } else {\n      this.errorLog('CSRF state token does not match one provided.');\n      return false;\n    }\n  }\n\n  return false;\n};\n\n/**\n * Retrieves the UID with the understanding that\n * $this->accessToken has already been set and is\n * seemingly legitimate.  It relies on Facebook's Graph API\n * to retrieve user information and then extract\n * the user ID.\n *\n * @return integer Returns the UID of the Facebook user, or 0\n *                 if the Facebook user could not be determined.\n */\nBaseFacebook.prototype.getUserFromAccessToken = function getUserFromAccessToken(callback) {\n  this.api('/me', cb.returnToCallback(callback, true, function(err, userInfo) {\n    if (err) {\n      return 0;\n    }\n    else {\n      return userInfo.id;\n    }\n  }));\n};\n\nBaseFacebook.prototype.getUserFromAccessToken = cb.wrap(BaseFacebook.prototype.getUserFromAccessToken);\n\n/**\n * Retrieves an access token for the given authorization code\n * (previously generated from www.facebook.com on behalf of\n * a specific user).  The authorization code is sent to graph.facebook.com\n * and a legitimate access token is generated provided the access token\n * and the user for which it was generated all match, and the user is\n * either logged in to Facebook or has granted an offline access permission.\n *\n * @param string $code An authorization code.\n * @return mixed An access token exchanged for the authorization code, or\n *               false if an access token could not be generated.\n */\nBaseFacebook.prototype.getAccessTokenFromCode = function getAccessTokenFromCode(code, redirectUri, callback) {\n  if (!code) {\n    callback(null, false);\n  }\n  else {\n    if (!redirectUri) {\n      redirectUri = this.getCurrentUrl();\n    }\n\n    // need to circumvent json_decode by calling oauthRequest\n    // directly, since response isn't JSON format.\n    this.oauthRequest('graph.facebook.com', '/oauth/access_token', {\n      client_id: this.getAppId(),\n      client_secret: this.getAppSecret(),\n      redirect_uri: redirectUri,\n      code: code\n    }, \n    cb.returnToCallback(callback, true, function(err, accessTokenResponse) {\n      if (err) {\n        if (err instanceof FacebookApiError) {\n          // most likely that user very recently revoked authorization.\n          // In any event, we don't have an access token, so say so.\n          return false;\n        }\n        else {\n          throw err;\n        }\n      }\n      else {\n        if (!accessTokenResponse) {\n          return false;\n        }\n        else {\n          var responseParams = querystring.parse(accessTokenResponse);\n          if (!responseParams.hasOwnProperty('access_token')) {\n            return false;\n          }\n          else {\n            return responseParams.access_token;\n          }\n        }\n      }\n    }));\n  }\n};\n\nBaseFacebook.prototype.getAccessTokenFromCode = cb.wrap(BaseFacebook.prototype.getAccessTokenFromCode);\n\n/**\n * Returns the Current URL, stripping it of known FB parameters that should\n * not persist.\n *\n * @return string The current URL\n * @throws Errror\n */\nBaseFacebook.prototype.getCurrentUrl = function() {\n  if (this.currentUrl !== null) {\n    return this.currentUrl;\n  }\n\n  if (!this.request) {\n    throw new Error('No request object.');\n  }\n\n  var req = this.request;\n  var conn = req.connection;\n  var headers = req.headers;\n  if (conn.pair || req.https === 'on' || headers['x-forwarded-proto'] === 'https') {\n    var protocol = 'https://';\n  }\n  else {\n    var protocol = 'http://';\n  }\n\n  var host = headers['x-forwarded-host'] || headers.host;\n  var path = req.url;\n\n  var currentUrl = protocol + host + path;\n\n  var parts = url.parse(currentUrl);\n\n  if (parts.query) {\n    var params = parts.query.split(/&/);\n    var self = this;\n    delete parts.href;\n    delete parts.path;\n    delete parts.query;\n\n    parts.search = '';\n\n    params = params.filter(function(param) { return self.shouldRetainParam(param) });\n    if (params.length > 0) {\n      parts.search = '?' + params.join('&');\n    }\n  }\n\n  return url.format(parts);\n};\n\n/**\n * Returns true if and only if the key or key/value pair should\n * be retained as part of the query string.  This amounts to\n * a brute-force search of the very small list of Facebook-specific\n * params that should be stripped out.\n *\n * @param string $param A key or key/value pair within a URL's query (e.g.\n *                     'foo=a', 'foo=', or 'foo'.\n *\n * @return boolean\n */\nBaseFacebook.prototype.shouldRetainParam = function(param) {\n  var splited = param.split(/=/);\n  return !((splited.length > 1) && this.dropQueryParams.hasOwnProperty(splited[0]));\n};\n\nBaseFacebook.prototype.dropQueryParams = {\n  code: true,\n  state: true,\n  signed_request: true,\n  base_domain: true\n};\n\n/**\n * Make a OAuth Request.\n *\n * @param string $url The path (required)\n * @param array $params The query/post data\n *\n * @return string The decoded response object\n */\nBaseFacebook.prototype.oauthRequest = function oauthRequest(host, path, params, callback) {\n  var self = this;\n  if (!params.hasOwnProperty('access_token')) {\n    this.getAccessToken(function(err, accessToken) {\n      try {\n        if (err) {\n          throw err;\n        }\n        params['access_token'] = accessToken;\n        next();\n      }\n      catch (err) {\n        callback(err, null);\n      }\n    });\n  }\n  else {\n    next();\n  }\n  function next() {\n    // json_encode all params values that are not strings\n    for (var key in params) {\n      var value = params[key];\n      if (typeof value !== 'string') {\n        params[key] = JSON.stringify(value);\n      }\n    }\n\n    self.makeRequest(host, path, params, callback);\n  }\n};\n\nBaseFacebook.prototype.oauthRequest = cb.wrap(BaseFacebook.prototype.oauthRequest);\n\n/**\n * Makes an HTTP request. This method can be overridden by subclasses if\n * developers want to do fancier things or use something other than curl to\n * make the request.\n *\n * @param string host The Host to make the request to\n * @param string path The URL to make the request to\n * @param array params The parameters to use for the POST body\n * @param callback\n */\nBaseFacebook.prototype.makeRequest = function makeRequest(host, path, params, callback) {\n  requestUtil.requestFacebookApi(https, host, 443, path, params, this.fileUploadSupport, callback);\n};\n\nBaseFacebook.prototype.makeRequest = cb.wrap(BaseFacebook.prototype.makeRequest);\n\n/**\n * Prints to the error log if you aren't in command line mode.\n *\n * @param string $msg Log message\n */\nBaseFacebook.prototype.errorLog = function(msg) {\n  util.debug(msg);\n};\n\n/**\n * Thrown when an API call returns an exception.\n *\n * @author Naitik Shah <naitik@facebook.com>\n */\nfunction FacebookApiError(result) {\n  this.result = result;\n\n  this.code = this.result.hasOwnProperty('error_code') ? result.error_code : 0;\n\n  if (result.hasOwnProperty('error_description')) {\n    // OAuth 2.0 Draft 10 style\n    var msg = result.error_description;\n  } else if (result.hasOwnProperty('error') && result.error && typeof (result.error) === 'object') {\n    // OAuth 2.0 Draft 00 style\n    var msg = result.error.message;\n  } else if (result.hasOwnProperty('error_msg')) {\n    // Rest server style\n    var msg = result.error_msg;\n  } else {\n    var msg = 'Unknown Error. Check getResult()';\n  }\n\n  Error.apply(this, []);\n  this.message = msg;\n}\n\nutil.inherits(FacebookApiError, Error);\n\n/**\n * The result from the API server that represents the exception information.\n */\nFacebookApiError.prototype.result = null;\n\n/**\n * Return the associated result object returned by the API server.\n *\n * @return array The result from the API server\n */\nFacebookApiError.prototype.getResult = function() {\n  return this.result;\n};\n\n/**\n * Returns the associated type for the error. This will default to\n * 'Error' when a type is not available.\n *\n * @return string\n */\nFacebookApiError.prototype.getType = function() {\n  if (this.result.hasOwnProperty('error')) {\n    var error = this.result.error;\n    if (typeof error === 'string') {\n      // OAuth 2.0 Draft 10 style\n      return error;\n    }\n    else if (error && typeof error === 'object') {\n      // OAuth 2.0 Draft 00 style\n      if (error.hasOwnProperty('type')) {\n        return error.type;\n      }\n    }\n  }\n\n  return 'Error';\n};\n\n/**\n * To make debugging easier.\n *\n * @return string The string representation of the error\n */\nFacebookApiError.prototype.toString = function() {\n  var str = this.getType() + ': ';\n  if (this.code !== 0) {\n    str += this.code + ': ';\n  }\n  return str + this.message;\n};\n\n// for test\nBaseFacebook.FacebookApiError = FacebookApiError;\n\nfunction isArray(ar) {\n  return Array.isArray(ar) || (typeof ar === 'object' && Object.prototype.toString.call(ar) === '[object Array]');\n}\n\nmodule.exports = BaseFacebook;\n","/home/travis/build/npmtest/node-npmtest-facebook-node-sdk/node_modules/facebook-node-sdk/lib/cbutil.js":"\nvar assert = require('assert');\n\n/**\n * This function wrap a function that taken a callback:\n * - to callback when we catch error and\n * - to wrap the callback:\n *   - to avoid throwing error in the callback and\n *   - to avoid being called twice.\n *\n * @param fn function that taken a callback.\n * @param addError (optional) If this is true callback is not taken an error. And unshift callback arguments to pass an error.\n * @param callbackIndex (optional) argument index of callback\n */\nexports.wrap = function wrap(fn, /* opt */addError, /* opt */callbackIndex) {\n  if (fn.name === '__cbUtilWrapped__') {\n    return fn;\n  }\n  return function __cbUtilWrapped__() {\n    var index = (callbackIndex === undefined) ? arguments.length - 1 : callbackIndex;\n    var callback = arguments[index];\n    if (typeof callback !== 'function') {\n      throw new Error('Callback is not a function.');\n    }\n    callback = wrapCallback(callback, addError);\n    arguments[index] = callback;\n    try {\n      fn.apply(this, arguments);\n    }\n    catch (err) {\n      callback(err, null);\n    }\n  };\n};\n\nexports.errorLog = function(msg) {\n  console.error(msg);\n};\n\nexports.returnToCallback = function(callback, handleError, fn) {\n  return function() {\n    try {\n      if (handleError) {\n        callback(null, fn.apply(this, arguments));\n      }\n      else {\n        var args = Array.prototype.slice.call(arguments);\n        var e = args.shift();\n        if (e) {\n          throw e;\n        }\n        callback(null, fn.apply(this, args));\n      }\n    }\n    catch (err) {\n      callback(err, null);\n    }\n  };\n};\n\nfunction wrapCallback(callback, /* opt */addError) {\n  assert.ok(callback.name !== '__cbUtilwrappedCallback__');\n  var called = false;\n  return function __cbUtilWrappedCallback__() {\n    if (called === true) {\n      exports.errorLog(new Error('Cannot call callback twice.').stack);\n    }\n    else {\n      called = true;\n      try {\n        if (addError === true) {\n          // to array\n          var args = Array.prototype.slice.call(arguments);\n          args.unshift(null);\n          callback.apply(this, args);\n        }\n        else {\n          callback.apply(this, arguments);\n        }\n      }\n      catch (err) {\n        exports.errorLog('Callback cannot throw error: ' + err.stack);\n      }\n    }\n  };\n};\n\n","/home/travis/build/npmtest/node-npmtest-facebook-node-sdk/node_modules/facebook-node-sdk/lib/requestutil.js":"\nvar assert = require('assert');\nvar querystring = require('querystring');\nvar Multipart = require('./multipart');\n\nexports.requestFacebookApi = function(http, host, port, path, params, withMultipart, callback) {\n  var req = new FacebookApiRequest(http, host, port, path, params);\n  req.start(withMultipart, callback);\n};\n\n// export for debug\nexports.FacebookApiRequest = FacebookApiRequest;\n\nfunction bindSelf(self, fn) {\n  return function selfBoundFunction() {\n    return fn.apply(self, arguments);\n  };\n}\n\nfunction FacebookApiRequest(http, host, port, path, params) {\n  assert.equal(this.http, null);\n  assert.equal(this.host, null);\n  assert.equal(this.port, null);\n  assert.equal(this.path, null);\n  assert.equal(this.params, null);\n\n  // TODO request timeout setting\n  // TODO user agent setting\n\n  this.http = http;\n  this.host = host;\n  this.port = port;\n  this.path = path;\n  this.params = params;\n\n  this.selfBoundResponseErrorHandler = bindSelf(this, this.handleResponseError);\n  this.selfBoundResponseHandler = bindSelf(this, this.handleResponse);\n  this.selfBoundDataHandler = bindSelf(this, this.handleData);\n  this.selfBoundDataErrorHandler = bindSelf(this, this.handleDataError);\n  this.selfBoundEndHandler = bindSelf(this, this.handleEnd);\n}\n\nFacebookApiRequest.prototype.http = null;\nFacebookApiRequest.prototype.host = null;\nFacebookApiRequest.prototype.port = null;\nFacebookApiRequest.prototype.path = null;\nFacebookApiRequest.prototype.params = null;\nFacebookApiRequest.prototype.callback = null;\nFacebookApiRequest.prototype.selfBoundResponseErrorHandler = null;\nFacebookApiRequest.prototype.selfBoundResponseHandler = null;\nFacebookApiRequest.prototype.selfBoundDataHandler = null;\nFacebookApiRequest.prototype.selfBoundDataErrorHandler = null;\nFacebookApiRequest.prototype.selfBoundEndHandler = null;\n\nFacebookApiRequest.prototype.start = function(withMultipart, callback) {\n  assert.equal(this.req, null);\n  assert.equal(this.callback, null);\n\n  this.callback = callback;\n\n  if (withMultipart) {\n    var multipart = new Multipart();\n    var keys = Object.keys(this.params);\n    var self = this;\n    (function loop() {\n      try {\n        var key = keys.shift();\n        if (key === undefined) {\n          afterParams();\n          return;\n        }\n        if (self.params[key].charAt(0) === '@') {\n          multipart.addFile(key, self.params[key].substr(1), function(err) {\n            if (err) {\n              callback(err, null);\n            }\n            else {\n              loop();\n            }\n          });\n        }\n        else {\n          multipart.addText(key, self.params[key]);\n          loop();\n        }\n      }\n      catch (err) {\n        callback(err, null);\n      }\n    })();\n    function afterParams() {\n      try {\n        var options = {\n          host: self.host,\n          path: self.path,\n          port: self.port,\n          method: 'POST',\n          headers: {\n            'Content-Type': multipart.getContentType(),\n            'Content-Length': multipart.getContentLength()\n          }\n        };\n        self.req = self.http.request(options);\n        self.req.on('error', self.selfBoundResponseErrorHandler);\n        self.req.on('response', self.selfBoundResponseHandler);\n        multipart.writeToStream(self.req, function(err) {\n          if (err) {\n            onerror(err);\n          }\n          else {\n            self.req.end();\n          }\n        });\n      }\n      catch (err) {\n        onerror(err);\n      }\n      function onerror(err) {\n        if (self.req) {\n          self.callQuietly(self.detachResponseAndErrorHandlers);\n          self.callQuietly(self.abortRequest);\n        }\n        callback(err, null);\n      }\n    }\n  }\n  else {\n    // Querystring is encoding multibyte as utf-8.\n    var postData = querystring.stringify(this.params);\n\n    var options = {\n      host: this.host,\n      path: this.path,\n      port: this.port,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Content-Length': postData.length\n      }\n    };\n\n    this.req = this.http.request(options);\n    this.req.on('error', this.selfBoundResponseErrorHandler);\n    this.req.on('response', this.selfBoundResponseHandler);\n    this.req.end(postData);\n  }\n};\n\nFacebookApiRequest.prototype.req = null;\n\nFacebookApiRequest.prototype.handleResponse = function(res) {\n  assert.notEqual(this.callback, null);\n\n  try {\n    this.detachResponseAndErrorHandlers();\n    this.afterResponse(res);\n  }\n  catch (err) {\n    this.callback(err, null);\n  }\n};\n\nFacebookApiRequest.prototype.handleResponseError = function (err) {\n  assert.notEqual(this.callback, null);\n\n  this.callQuietly(this.detachResponseAndErrorHandlers);\n  this.callQuietly(this.abortRequest);\n  this.callback(err, null);\n};\n\nFacebookApiRequest.prototype.detachResponseAndErrorHandlers = function() {\n  assert.notEqual(this.req, null);\n\n  this.req.removeListener('error', this.selfBoundResponseErrorHandler);\n  this.req.removeListener('response', this.selfBoundResponseHandler);\n};\n\nFacebookApiRequest.prototype.afterResponse = function(res) {\n  assert.equal(this.res, null);\n  assert.equal(this.responseBody, null);\n\n  this.res = res;\n  this.res.setEncoding('utf8');\n  this.responseBody = [];\n  this.res.on('data', this.selfBoundDataHandler);\n  this.res.on('error', this.selfBoundDataErrorHandler);\n  this.res.on('end', this.selfBoundEndHandler);\n};\n\nFacebookApiRequest.prototype.res = null;\nFacebookApiRequest.prototype.responseBody = null;\n\nFacebookApiRequest.prototype.handleData = function(data) {\n  assert.notEqual(this.responseBody, null);\n\n  this.responseBody.push(data);\n};\n\nFacebookApiRequest.prototype.handleDataError = function (err) {\n  this.callQuietly(this.detachDataAndEndAndErrorHandlers);\n  this.callQuietly(this.abortRequest);\n  this.callback(err, null);\n};\n\nFacebookApiRequest.prototype.handleEnd = function() {\n  assert.notEqual(this.responseBody, null);\n  assert.notEqual(this.callback, null);\n\n  try {\n    this.detachDataAndEndAndErrorHandlers();\n    this.callback(null, this.responseBody.join(''));\n  }\n  catch (err) {\n    this.callback(err, null);\n  }\n};\n\nFacebookApiRequest.prototype.detachDataAndEndAndErrorHandlers = function() {\n  this.res.removeListener('data', this.selfBoundDataHandler);\n  this.res.removeListener('error', this.selfBoundDataErrorHandler);\n  this.res.removeListener('end', this.selfBoundEndHandler);\n};\n\nFacebookApiRequest.prototype.abortRequest = function() {\n  assert.notEqual(this.req, null);\n  this.req.abort();\n};\n\nFacebookApiRequest.prototype.callQuietly = function() {\n  try {\n    var args = [].slice.call(arguments);\n    var fn = args.shift();\n    return fn.apply(this, args);\n  }\n  catch (err) {\n    // ignore error\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-facebook-node-sdk/node_modules/facebook-node-sdk/lib/multipart.js":"\nvar assert = require('assert');\nvar path = require('path');\nvar fs = require('fs');\nvar cb = require('./cbutil');\n\nfunction Multipart() {\n  this.dash = new Buffer('--', 'ascii');\n\n  this.boundary = this.generateBoundary();\n\n  this.parts = [];\n}\n\nMultipart.prototype.dash = null;\nMultipart.prototype.boundary = null;\nMultipart.prototype.crlf = new Buffer('\\r\\n', 'ascii');\n\nMultipart.prototype.generateBoundary = function generateBoundary() {\n  return new Buffer(\n    Math.floor(Math.random() * 0x80000000).toString(36) +\n    Math.abs(Math.floor(Math.random() * 0x80000000) ^ +new Date()).toString(36),\n    'ascii'\n  );\n};\n\nMultipart.prototype.addFile = function addFile(name, filePath, callback) {\n  var self = this;\n  fs.open(filePath, 'r', function(err, fd) {\n    if (err) {\n      callback(err);\n      return;\n    }\n    try {\n      fs.fstat(fd, cb.returnToCallback(callback, false, function(stat) {\n        var fileName = path.basename(filePath);\n        self.addStream(name, stat.size, fs.createReadStream(filePath, { fd: fd }), null, fileName);\n        return null;\n      }));\n    }\n    catch (e) {\n      callback(e);\n    }\n  });\n};\n\nMultipart.prototype.addFile = cb.wrap(Multipart.prototype.addFile);\n\nMultipart.prototype.addBuffer = function addBuffer(name, buffer, mime, fileName) {\n  this.parts.push({\n    type: 'buffer',\n    name: new Buffer(name, 'utf8'),\n    fileName: typeof fileName === 'string' ? new Buffer(fileName, 'utf8') : null,\n    buffer: buffer,\n    size: buffer.length,\n    mime: new Buffer(mime || 'application/octet-stream', 'ascii')\n  });\n};\n\nMultipart.prototype.addStream = function addStream(name, size, stream, mime, fileName) {\n  stream.pause();\n  this.parts.push({\n    type: 'stream',\n    name: new Buffer(name, 'utf8'),\n    fileName: typeof fileName === 'string' ? new Buffer(fileName, 'utf8') : null,\n    stream: stream,\n    size: size,\n    mime: new Buffer(mime || 'application/octet-stream', 'ascii')\n  });\n};\n\nMultipart.prototype.addText = function addText(name, text) {\n  var buffer = new Buffer(text, 'ascii');\n  this.addBuffer(name, buffer, 'text/plain; charset=UTF-8');\n};\n\nMultipart.prototype.contentTypeValuePrefix = new Buffer('multipart/form-data; boundary=', 'ascii');\n\nMultipart.prototype.getContentType = function getContentType() {\n  var buffer = new Buffer(this.contentTypeValuePrefix.length + this.boundary.length);\n  this.contentTypeValuePrefix.copy(buffer);\n  this.boundary.copy(buffer, this.contentTypeValuePrefix.length);\n  return buffer;\n};\n\nMultipart.prototype.contentDispositionPrefix = new Buffer('Content-Disposition: form-data; name=\"', 'ascii');\nMultipart.prototype.contentDispositionSuffix = new Buffer('\"', 'ascii');\nMultipart.prototype.contentDispositionFilenamePrefix = new Buffer('; filename=\"', 'ascii');\nMultipart.prototype.contentDispositionFilenameSuffix = new Buffer('\"', 'ascii');\nMultipart.prototype.partContentTypePrefix = new Buffer('Content-Type: ', 'ascii');\n\nMultipart.prototype.getContentLength = function getContentLength() {\n\n  var self = this;\n  var length = this.parts.reduce(function(sum, part) {\n    var partLength = self.dash.length +\n                     self.boundary.length +\n                     self.crlf.length;\n\n    partLength += self.contentDispositionPrefix.length +\n                  part.name.length +\n                  self.contentDispositionSuffix.length;\n    if (part.fileName !== null) {\n      partLength += self.contentDispositionFilenamePrefix.length +\n                    part.fileName.length +\n                    self.contentDispositionFilenameSuffix.length;\n    }\n    partLength += self.crlf.length;\n\n    partLength += self.partContentTypePrefix.length +\n                  part.mime.length +\n                  self.crlf.length +\n                  self.crlf.length;\n\n    partLength += part.size + self.crlf.length;\n\n    return sum + partLength;\n  }, 0);\n\n  length += self.dash.length +\n            self.boundary.length +\n            self.dash.length +\n            self.crlf.length;\n\n  return length;\n};\n\nMultipart.prototype.writeToStream = function writeToStream(stream, callback) {\n  var self = this;\n  var parts = this.parts;\n\n  var entities = [];\n\n  for (var i = 0; i < parts.length; i++) {\n    var part = parts[i];\n\n    entities.push(self.dash);\n    entities.push(self.boundary);\n    entities.push(self.crlf);\n\n    entities.push(self.contentDispositionPrefix);\n    entities.push(part.name);\n    entities.push(self.contentDispositionSuffix);\n    if (part.fileName !== null) {\n      entities.push(self.contentDispositionFilenamePrefix);\n      entities.push(part.fileName);\n      entities.push(self.contentDispositionFilenameSuffix);\n    }\n    entities.push(self.crlf);\n\n    entities.push(self.partContentTypePrefix);\n    entities.push(part.mime);\n    entities.push(self.crlf);\n    entities.push(self.crlf);\n\n    if (part.type === 'buffer') {\n      entities.push(part.buffer);\n      entities.push(self.crlf);\n    }\n    else {\n      entities.push(part.stream);\n      entities.push(self.crlf);\n    }\n  }\n\n  entities.push(self.dash);\n  entities.push(self.boundary);\n  entities.push(self.dash);\n  entities.push(self.crlf);\n\n  function write(stream, entities) {\n    var entity = entities[0];\n    if (entity === undefined) {\n      callback(null);\n      return;\n    }\n    try {\n      if (entity instanceof Buffer) {\n        var buffer = entity;\n        if (stream.write(buffer)) {\n          write(stream, entities.slice(1));\n        }\n        else {\n          stream.once('drain', function() {\n            try {\n              write(stream, entities.slice(1));\n            }\n            catch (err) {\n              callback(err);\n            }\n          });\n        }\n      }\n      else {\n        var readableStream = entity;\n        var readableStreamOnError = function(err) {\n          try { readableStream.removeListener('error', readableStreamOnError) } catch (e) { }\n          try { readableStream.removeListener('end', readableStreamOnEnd) } catch (e) { }\n          try { readableStream.destroy() } catch (e) { }\n          callback(err);\n        };\n        var readableStreamOnEnd = function() {\n          try {\n            readableStream.removeListener('error', readableStreamOnError);\n            readableStream.removeListener('end', readableStreamOnEnd);\n            write(stream, entities.slice(1));\n          }\n          catch (err) {\n            callback(err);\n          }\n        };\n        readableStream.on('error', readableStreamOnError);\n        readableStream.on('end', readableStreamOnEnd);\n        readableStream.pipe(stream, { end: false });\n        readableStream.resume();\n      }\n    }\n    catch (err) {\n      callback(err);\n    }\n  }\n\n  write(stream, entities);\n};\n\nMultipart.prototype.writeToStream = cb.wrap(Multipart.prototype.writeToStream);\n\nmodule.exports = Multipart;\n\n","/home/travis/build/npmtest/node-npmtest-facebook-node-sdk/node_modules/facebook-node-sdk/util/create_signed_request.js":"var util = require('util');\nvar crypto = require('crypto');\nvar assert = require('assert');\n\nassert.equal(process.argv.length, 3, 'Command line arguments length must be 3');\nassert.ok('TEST_FB_SECRET' in process.env);\n\nconsole.log(createSignedRequest(process.argv[2], process.env.TEST_FB_SECRET));\n\nfunction createSignedRequest(json, secret) {\n  var payload = encodeBase64Url(json);\n\n  var hmac = crypto.createHmac('sha256', secret);\n  hmac.update(payload);\n  var encodedSig = hmac.digest('base64');\n  encodedSig = base64ToBase64Url(encodedSig);\n\n  return encodedSig + '.' + payload;\n}\n\nfunction encodeBase64Url(str) {\n  var buffer = new Buffer(str, 'utf8');\n  var base64 = buffer.toString('base64');\n  var base64url = base64ToBase64Url(base64);\n  return base64url;\n}\n\nfunction base64ToBase64Url(base64) {\n  var base64url = base64.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n  return base64url;\n}\n\n"}